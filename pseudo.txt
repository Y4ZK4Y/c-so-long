


moves
move_left();
move_right();
move_up();
move_down();


init MLX42
create window
init game state


game_init()
{
	init_data();
	init_mlx();
	init_img();
}



init_img()
{
	load_background
	load_playa()
	load_wall()
	
}
game_start()
{
	render_assets(); // load
	render_map();
	setup_event_listeners();
	other setups;
}
game_loop()
{
	setup loopy things;
}

so_long()
{
	game_init();
	game_start();
	game_loop();
	game_end();
}
is_map_valid()
{
	is_empty_line();
	is_component_count_valid();
	is_rectangular();
	is_walled();
	is_path_valid();
}

parse_input()
{
	is_extension_valid();
	read_input();
	is_map_valid();
}

main()
{
	if agrc != 2
		exit
	parse_input();
	so_long();
	cleanup();
	return ();
}


cleanup()
{
    put_text()
    display_error_exit();
}


while (game_state == PLAYING)
{
    // Game loop goes here

    if (/* player has won */)
    {
        game_state = VICTORY;
    }
    else if (/* player has lost */)
    {
        game_state = GAME_OVER;
    }
}


--------------------------------------------------------------


init_game(t_game *game);

function()
{
	t_game game;
	init_game(&game);

}

--------------------------------------------------------------

init_game(t_game **game) or init_game(t_game *game);

function()
{
	t_game *game;
	game = malloc(sizeof(t_game));
	init_game(&game) or init_game(game);

}

--------------------------------------------------------------
--------------------------------------------------------------

typedef struct s_entity{
	int x;
	mlx_image_t *img;
}			t_entity;


typedef struct s_game{
	t_entity *player;
}			t_game;	


void	init_entity(t_entity **entity)
{
	(*entity)->x = 0;
	(*entity)->img = NULL;		
}
function()
{
	t_game game;
	init_game(&game)
	game->player = malloc(sizeof(t_entity));
	init_entity(&game->player);

}


--------------------------------------------------------------



typedef struct s_entity{
	int x;
	mlx_image_t *img;
}			t_entity;


typedef struct s_game{
	t_entity *player;
}			t_game;	


void	init_entity(t_entity *entity)
{
	entity->x = 0;
	entity->img = NULL;		
}
function()
{
	t_game game;
	init_game(&game)
	game->player = malloc(sizeof(t_entity));
	init_entity(game->player);

}


--------------------------------------------------------------



typedef struct s_entity{
	int x;
	mlx_image_t *img;
}			t_entity;


typedef struct s_game{
	t_entity *player;
}			t_game;	



init_entity(t_entity **entity)
{
    *entity = malloc(sizeof(t_entity));
    if (*entity == NULL)
        return 1;
    (*entity)->x = 0;
    (*entity)->img = NULL;
}


function()
{
	t_game game;
	init_game(&game)
	init_entity(&game->player);


}